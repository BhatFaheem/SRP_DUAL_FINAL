//
// Generated file, do not edit! Created by opp_msgtool 6.1 from RoutingUpdate.msg.
//

#ifndef __ROUTINGUPDATE_M_H
#define __ROUTINGUPDATE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0601
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class RoutingUpdate;
/**
 * Class generated from <tt>RoutingUpdate.msg:1</tt> by opp_msgtool.
 * <pre>
 * message RoutingUpdate
 * {
 *     string senderId;
 *     string destination;
 *     string nextHop;
 *     int cost;
 *     long sequenceNumber;
 *     string hmac;  // Will store hash value (SHA1, SHA256, or SHA3)
 * }
 * </pre>
 */
class RoutingUpdate : public ::omnetpp::cMessage
{
  protected:
    omnetpp::opp_string senderId;
    omnetpp::opp_string destination;
    omnetpp::opp_string nextHop;
    int cost = 0;
    long sequenceNumber = 0;
    omnetpp::opp_string hmac;

  private:
    void copy(const RoutingUpdate& other);

  protected:
    bool operator==(const RoutingUpdate&) = delete;

  public:
    RoutingUpdate(const char *name=nullptr, short kind=0);
    RoutingUpdate(const RoutingUpdate& other);
    virtual ~RoutingUpdate();
    RoutingUpdate& operator=(const RoutingUpdate& other);
    virtual RoutingUpdate *dup() const override {return new RoutingUpdate(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getSenderId() const;
    virtual void setSenderId(const char * senderId);

    virtual const char * getDestination() const;
    virtual void setDestination(const char * destination);

    virtual const char * getNextHop() const;
    virtual void setNextHop(const char * nextHop);

    virtual int getCost() const;
    virtual void setCost(int cost);

    virtual long getSequenceNumber() const;
    virtual void setSequenceNumber(long sequenceNumber);

    virtual const char * getHmac() const;
    virtual void setHmac(const char * hmac);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const RoutingUpdate& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, RoutingUpdate& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline RoutingUpdate *fromAnyPtr(any_ptr ptr) { return check_and_cast<RoutingUpdate*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __ROUTINGUPDATE_M_H

